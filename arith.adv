rm arith.adv
/bin/umodem arith.adv EOF
{ comments are enclosed by curly-braces;
  no nested comments are allowed  }

{ addition

  these rules work when the arguments are numerals
  but not for all arbitrary expressions

}
Add Z y => y;
Add (S x) y => S (Add x y);
Add (Mult Z y) z => z;
Add (Mult (S x) y) z => Add (Add y (Mult x y)) z;
Add (Add x y) z => Add x (Add y z);

{ define multiplication (Mult) here }
Mult Z y => Z;
{ Mult (S Z) y => y; }
Mult (S x) y => Add y (Mult x y);
Mult (Add Z x) y => Mult x y;
Mult (Add (S x) y) z => Add z (Mult (Add x y) z);
Mult (Mult x y) z => Mult x (Mult y z);

{ when all other computation is done }
Compute x => x;

. { end of rules }
EOF
rm arith.tests
/bin/umodem arith.tests EOF
{ tests for arithmetic }

{ test addition on numerals }
{ Compute (Add (S (S Z)) (S (S Z))) -> (S (S (S (S Z)))); }

{ test multiplication on numerals }
{ Compute (Mult (S (S Z)) (S (S Z))) -> (S (S (S (S Z)))); }

{ test nested expressions }
{ Compute (Add (S Z) (Mult (S (S Z)) (S (S (S Z))))) -> (S (S (S (S (S (S (S Z))))))); }
{ Compute (Add (Add (S (S Z)) (S Z)) (Add (S (S (S Z))) (S (S Z)))) -> (S (S (S (S (S (S (S (S Z)))))))); }

Compute (Mult (Mult (S (S Z)) (S (S (S Z)))) (Mult (S (S (S Z))) (S (S Z)))) -> (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))))))))))))))))))));

. { end of tests }
EOF
advise run arith.adv arith.tests
